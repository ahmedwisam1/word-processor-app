# Import necessary libraries
from tkinter import *
from tkinter.ttk import *
from tkinter import font, colorchooser, filedialog, messagebox, simpledialog
import os
import tkinter as tk
import tempfile
from tkinter.simpledialog import Dialog

# Functionality part
class HeaderFooterPageDialog(Dialog):
    def body(self, master):
        self.header_label = Label(master, text="Header:")
        self.header_label.grid(row=0, column=0, sticky=W)
        self.header_entry = Entry(master)
        self.header_entry.grid(row=0, column=1)

        self.footer_label = Label(master, text="Footer:")
        self.footer_label.grid(row=1, column=0, sticky=W)
        self.footer_entry = Entry(master)
        self.footer_entry.grid(row=1, column=1)

        self.page_number_label = Label(master, text="Page Number:")
        self.page_number_label.grid(row=2, column=0, sticky=W)
        self.page_number_entry = Entry(master)
        self.page_number_entry.grid(row=2, column=1)
        
        
        self.initial_focus = self.header_entry
        
        return self.header_entry  

    def apply(self):
        self.result = (self.header_entry.get(), self.footer_entry.get(), self.page_number_entry.get())

def add_header_footer_page():
    dialog = HeaderFooterPageDialog(root)
    result = dialog.result
    if result:
        header, footer, page_number = result
        if header:
            textarea.insert(END, f"\n\nHeader: {header}")
        if footer:
            textarea.insert(END, f"\n\nFooter: {footer}")
        if page_number:
            textarea.insert(END, f"\n\nPage Number: {page_number}")

def format_painter():
    global copied_formatting
    copied_formatting = {}
    if textarea.tag_ranges("sel"):
        selected_tags = textarea.tag_names("sel.first")
        for tag in selected_tags:
            copied_formatting[tag] = textarea.tag_cget(tag, 'foreground'), textarea.tag_cget(tag, 'background'), textarea.tag_cget(tag, 'font')

def apply_copied_format():
    if copied_formatting:
        if textarea.tag_ranges("sel"):
            start, end = textarea.tag_ranges("sel")
            for tag, config in copied_formatting.items():
                foreground, background, font = config
                textarea.tag_add(tag, start, end)
                textarea.tag_configure(tag, foreground=foreground, background=background, font=font)
        else:
            messagebox.showinfo("No Text Selected", "Please select text to apply copied formatting.")

def change_theme(bg_color, fg_color):
    textarea.config(bg=bg_color, fg=fg_color)

def find(event=None):
    def find_words():
        textarea.tag_remove('match', '1.0', 'end')
        start_pos = '1.0'
        word = findentryField.get()
        if word:
            found = False
            while True:
                start_pos = textarea.search(word, start_pos, stopindex='end', nocase=True)
                if not start_pos:
                    break
                found = True
                end_pos = f'{start_pos}+{len(word)}c'
                textarea.tag_add('match', start_pos, end_pos)
                textarea.tag_config('match', foreground='red', background='yellow')
                start_pos = end_pos
            if not found:
                show_error_message(f'The word "{word}" was not found.')


    def replace_text():
        word = findentryField.get()
        replaceword = replaceentryField.get()
        # Get current cursor position
        cursor_pos = textarea.index(INSERT)
        # Find the text to be replaced
        start_pos = '1.0'
        while True:
            start_pos = textarea.search(word, start_pos, stopindex='end')
            if not start_pos:
                break
            end_pos = f'{start_pos}+{len(word)}c'
            # Get formatting of the text to be replaced
            tags = textarea.tag_names(start_pos)
            # Replace the text
            textarea.delete(start_pos, end_pos)
            textarea.insert(start_pos, replaceword)
            # Reapply formatting to the replaced text
            for tag in tags:
                textarea.tag_add(tag, start_pos, f'{start_pos}+{len(replaceword)}c')
                textarea.tag_configure(tag, foreground=textarea.tag_cget(tag, 'foreground'),
                                       background=textarea.tag_cget(tag, 'background'),
                                       font=textarea.tag_cget(tag, 'font'))
            start_pos = end_pos
        # Restore cursor position
        textarea.mark_set(INSERT, cursor_pos)

    def show_error_message(message):
        error_window = Toplevel(root1)
        error_window.title('Error')
        find_window_position = root1.geometry()
        error_window.geometry(find_window_position)
        Label(error_window, text=message).pack(padx=10, pady=10)
        Button(error_window, text='OK', command=error_window.destroy).pack(pady=5)

    root1 = Toplevel()
    root1.title('Find')
    root1.geometry('450x250+500+200')
    root1.resizable(0, 0)

    labelFrame = LabelFrame(root1, text='Find and replace')
    labelFrame.pack(pady=50)

    findLabel = Label(labelFrame, text='Find')
    findLabel.grid(row=0, column=0, padx=5, pady=5)
    findentryField = Entry(labelFrame)
    findentryField.grid(row=0, column=1, padx=5, pady=5)

    replaceLabel = Label(labelFrame, text='Replace With')
    replaceLabel.grid(row=1, column=0, padx=5, pady=5)
    replaceentryField = Entry(labelFrame)
    replaceentryField.grid(row=1, column=1, padx=5, pady=5)

    findButton = Button(labelFrame, text='Find', command=find_words)
    findButton.grid(row=2, column=0, padx=5, pady=5)

    replaceButton = Button(labelFrame, text='Replace', command=replace_text)
    replaceButton.grid(row=2, column=1, padx=5, pady=5)

    def doSomething():
        textarea.tag_remove('match', 1.0, 'end')
        root1.destroy()
    root1.protocol('WM_DELETE_WINDOW', doSomething)

    root1.mainloop()

def clear_textarea(event=None):
    textarea.delete(0.0, "end")

def statuesBarFunction(event):
    if textarea.edit_modified():
        words=len(textarea.get(0.0, END).split())
        characters=len(textarea.get(0.0, 'end-1c').replace(' ', ''))
        statues_bar.config(text=f'Characters: {characters} Words: {words}')

    textarea.edit_modified(False)

url=''
def new_file(event=None):
    global url
    url=''
    textarea.delete(0.0, END)


def open_file(event=None):
    global url
    url = filedialog.askopenfilename(initialdir=os.getcwd(), title='Select File', filetypes=(('Text File', '*.txt'), ('All Files', '*.*')))
    if url !='':
        data=open(url, 'r')
        textarea.insert(0.0, data.read())
    root.title(os.path.basename(url))

def save_file(event=None):
    if url == '':
        save_url = filedialog.asksaveasfilename(defaultextension='.txt', filetypes=(('Text File', '*.txt'), ('All Files', '*.*')))
        if save_url:
            content = textarea.get(0.0, END)
            with open(save_url, 'w') as file:
                file.write(content)
            messagebox.showinfo("File Saved", "File has been saved successfully.")
    else:
        content = textarea.get(0.0, END)
        with open(url, 'w') as file:
            file.write(content)
        messagebox.showinfo("File Saved", "File has been saved successfully.")

def saveas_file(event=None):
    save_url = filedialog.asksaveasfilename(defaultextension='.txt', filetypes=(('Text File', '*.txt'), ('All Files', '*.*')))
    if save_url:
        content = textarea.get(0.0, END)
        with open(save_url, 'w') as file:
            file.write(content)
        messagebox.showinfo("File Saved", "File has been saved successfully.")
        global url
        url = save_url

def print_file(event=None):
    # Specify a directory where you have write permissions
    temp_dir = tempfile.mkdtemp(dir=os.getcwd())
    file_path = os.path.join(temp_dir, 'print_temp.txt')
    with open(file_path, 'w') as file:
        file.write(textarea.get('1.0', END))
    os.startfile(file_path, 'print')

def iexit(event=None):
    if textarea.edit_modified():
        result = messagebox.askyesnocancel('Warning', 'Do you want to save the file?')
        if result is True:
            if url != '':
                content = textarea.get(0.0, END)
                file = open(url, 'w')
                file.write(content)
                root.destroy()
            else:
                content = textarea.get(0.0, END)
                save_url = filedialog.asksaveasfile(mode='w', defaultextension='.txt', filetypes=(('Text File', '*.txt'), ('All Files', '*.*')))
                save_url.write(content)
                save_url.close()
                root.destroy()
        elif result is False:
            root.destroy()
        else:
            pass
    else:
        root.destroy()
    
fontSize= 12
fontStyle='arial'
def font_style(event):
    global fontStyle
    fontStyle = font_family_variable.get()
    if textarea.tag_ranges("sel"):
        start, end = textarea.tag_ranges("sel")
        for tag in textarea.tag_names(start):
            if tag != "sel":
                textarea.tag_remove(tag, start, end)
                textarea.tag_add(tag, start, end)
                textarea.tag_configure(tag, font=(fontStyle, fontSize))
    textarea.config(font=(fontStyle, fontSize))

def font_size(event):
    global fontSize
    fontSize = size_variable.get()
    if textarea.tag_ranges("sel"):
        start, end = textarea.tag_ranges("sel")
        for tag in textarea.tag_names(start):
            if tag != "sel":
                textarea.tag_remove(tag, start, end)
                textarea.tag_add(tag, start, end)
                textarea.tag_configure(tag, font=(fontStyle, fontSize))
    textarea.config(font=(fontStyle, fontSize))

def bold_text():
    if textarea.tag_ranges("sel"):
        current_tags = list(textarea.tag_names("sel.first"))  # Convert tuple to list
        if "bold" not in current_tags:
            current_tags.append("bold")
        else:
            current_tags.remove("bold")
        apply_format_tags(current_tags)

def italic_text():
    if textarea.tag_ranges("sel"):
        current_tags = list(textarea.tag_names("sel.first"))  # Convert tuple to list
        if "italic" not in current_tags:
            current_tags.append("italic")
        else:
            current_tags.remove("italic")
        apply_format_tags(current_tags)

def underline_text():
    if textarea.tag_ranges("sel"):
        current_tags = list(textarea.tag_names("sel.first"))  # Convert tuple to list
        if "underline" not in current_tags:
            current_tags.append("underline")
        else:
            current_tags.remove("underline")
        apply_format_tags(current_tags)

def apply_format_tags(tags):
    start, end = textarea.tag_ranges("sel")
    for tag in tags:
        if tag == "bold":
            font_weight = "bold"
        elif tag == "italic":
            font_slant = "italic"
        elif tag == "underline":
            font_underline = True
        else:
            font_weight = "normal"
            font_slant = "roman"
            font_underline = False

    textarea.tag_configure(tag, font=(fontStyle, fontSize, font_weight, font_slant), underline=font_underline)

    if tag not in textarea.tag_names(start):
        textarea.tag_add(tag, start, end)
    else:
        textarea.tag_remove(tag, start, end)

def color_select():
    color = colorchooser.askcolor()
    if color[1]:
        if textarea.tag_ranges("sel"):
            textarea.tag_remove("color", 1.0, "end")
            textarea.tag_add("color", "sel.first", "sel.last")
            textarea.tag_configure("color", foreground=color[1])
        else:
            messagebox.showinfo("No Text Selected", "Please select text to apply color.")

def align_right():
    if textarea.tag_ranges("sel"):
        textarea.tag_remove('center', 'sel.first', 'sel.last')
        textarea.tag_remove('left', 'sel.first', 'sel.last')
        textarea.tag_configure('right', justify='right')
        textarea.tag_add('right', 'sel.first', 'sel.last')
    else:
        textarea.tag_remove('center', 1.0, 'end')
        textarea.tag_remove('left', 1.0, 'end')
        textarea.tag_configure('right', justify='right')
        textarea.tag_add('right', 1.0, 'end')

def align_left():
    if textarea.tag_ranges("sel"):
        textarea.tag_remove('center', 'sel.first', 'sel.last')
        textarea.tag_remove('right', 'sel.first', 'sel.last')
        textarea.tag_configure('left', justify='left')
        textarea.tag_add('left', 'sel.first', 'sel.last')
    else:
        textarea.tag_remove('center', 1.0, 'end')
        textarea.tag_remove('right', 1.0, 'end')
        textarea.tag_configure('left', justify='left')
        textarea.tag_add('left', 1.0, 'end')

def align_center():
    if textarea.tag_ranges("sel"):
        textarea.tag_remove('left', 'sel.first', 'sel.last')
        textarea.tag_remove('right', 'sel.first', 'sel.last')
        textarea.tag_configure('center', justify='center')
        textarea.tag_add('center', 'sel.first', 'sel.last')
    else:
        textarea.tag_remove('left', 1.0, 'end')
        textarea.tag_remove('right', 1.0, 'end')
        textarea.tag_configure('center', justify='center')
        textarea.tag_add('center', 1.0, 'end')

# Create the root window
root = Tk()
root.title('Text Editor')
root.geometry('1200x620+10+10')
icon = tk.PhotoImage(file="icons/icon.png")
root.iconphoto(True, icon)

# Create menubar
menubar = Menu(root)
root.config(menu=menubar)

# File menu section
filemenu = Menu(menubar, tearoff=False)
menubar.add_cascade(label='File', menu=filemenu)

# Load icons for file menu options
newImage = PhotoImage(file='icons/new.png')
openImage = PhotoImage(file='icons/open.png')
saveImage = PhotoImage(file='icons/save.png')
saveasImage = PhotoImage(file='icons/save_as.png')
exitImage = PhotoImage(file='icons/exit.png')
printImage=PhotoImage(file='icons/print.png')

# Add commands to file menu
filemenu.add_command(label='New', accelerator='Ctrl+N', image=newImage, compound=LEFT, command=new_file)
filemenu.add_command(label='Open', accelerator='Ctrl+O', image=openImage, compound=LEFT, command=open_file)
filemenu.add_command(label='Save', accelerator='Ctrl+S', image=saveImage, compound=LEFT, command=save_file)
filemenu.add_command(label='Save As', accelerator='Ctrl+Alt+S', image=saveasImage, compound=LEFT, command=saveas_file)
filemenu.add_command(label='Print', accelerator='Ctrl+P', image=printImage, compound=LEFT, command=print_file)
filemenu.add_separator()
filemenu.add_command(label='Exit', accelerator='Ctrl+Q', image=exitImage, compound=LEFT, command=iexit)

# Edit menu section
editmenu = Menu(menubar, tearoff=False)
menubar.add_cascade(label='Edit', menu=editmenu)

# Load icons for edit menu options
headearfooterImage=PhotoImage(file='icons/headerfooter.png')
cutImage = PhotoImage(file='icons/cut.png')
copyImage = PhotoImage(file='icons/copy.png')
pasteImage = PhotoImage(file='icons/paste.png')
clearImage = PhotoImage(file='icons/clear_all.png')
findImage = PhotoImage(file='icons/find.png')

# Themes menu section
themesmenu=Menu(menubar, tearoff=False)
menubar.add_cascade(label='Themes', menu=themesmenu)
theme_choice=StringVar()
lightImage=PhotoImage(file='icons/light_default.png')
darkImage=PhotoImage(file='icons/dark.png')
themesmenu.add_radiobutton(label='Light Mode', image=lightImage, variable=theme_choice, compound=LEFT, command=lambda: change_theme('white', 'black'))
themesmenu.add_radiobutton(label='Dark Mode', image=darkImage, variable=theme_choice, compound=LEFT, command=lambda: change_theme('grey20', 'white'))

# Toolbar section
tool_bar=Label(root)
tool_bar.pack(side=TOP, fill=X)
font_families=font.families()
font_family_variable=StringVar()
fontfamily_Combobox=Combobox(tool_bar, width=30, values=font_families, state='readonly', textvariable=font_family_variable)
fontfamily_Combobox.current(font_families.index('Arial'))
fontfamily_Combobox.grid(row=0, column=0, padx=5)
size_variable=IntVar()
font_size_Combobox=Combobox(tool_bar, width=14, textvariable=size_variable, state='readonly', values=tuple(range(8, 81)))
font_size_Combobox.current(4)
font_size_Combobox.grid(row=0, column=1, padx=5)

fontfamily_Combobox.bind('<<ComboboxSelected>>', font_style)
font_size_Combobox.bind('<<ComboboxSelected>>', font_size)

# Buttons section
boldImage=PhotoImage(file='icons/bold.png')
boldButton=Button(tool_bar, image=boldImage, command=bold_text)
boldButton.grid(row=0, column=2, padx=5)

italicImage=PhotoImage(file='icons/italic.png')
italicButton=Button(tool_bar, image=italicImage, command=italic_text)
italicButton.grid(row=0, column=3, padx=5)

underlineImage=PhotoImage(file='icons/underline.png')
underlineButton=Button(tool_bar, image=underlineImage, command=underline_text)
underlineButton.grid(row=0, column=4, padx=5)

fontColorImage=PhotoImage(file='icons/font_color.png')
fontColorButton=Button(tool_bar, image=fontColorImage, command=color_select)
fontColorButton.grid(row=0, column=5, padx=5)

leftAlignImage=PhotoImage(file='icons/left.png')
leftAlignButton=Button(tool_bar, image=leftAlignImage, command=align_left)
leftAlignButton.grid(row=0, column=6, padx=5)

rightAlignImage=PhotoImage(file='icons/right.png')
rightAlignButton=Button(tool_bar, image=rightAlignImage, command=align_right)
rightAlignButton.grid(row=0, column=7, padx=5)

centerAlignImage=PhotoImage(file='icons/center.png')
centerAlignButton=Button(tool_bar, image=centerAlignImage, command=align_center)
centerAlignButton.grid(row=0, column=8, padx=5)

# Add a button for format painter to the toolbar
painterImage = PhotoImage(file='icons/format_painter_copy.png')
painterButton = Button(tool_bar, image=painterImage, command=format_painter)
painterButton.grid(row=0, column=9, padx=5)

# Add a button for applying copied formatting
applyFormatImage = PhotoImage(file='icons/format_painter_paste.png')
applyFormatButton = Button(tool_bar, image=applyFormatImage, command=apply_copied_format)
applyFormatButton.grid(row=0, column=10, padx=5)

scrollbar=Scrollbar(root)
scrollbar.pack(side=RIGHT, fill=Y)
textarea=Text(root, yscrollcommand=scrollbar.set, font=('arial', 12))
textarea.pack(fill=BOTH, expand=True)
scrollbar.config(command=textarea.yview)

statues_bar=Label(root, text='icons/Statues Bar')
statues_bar.pack(side=BOTTOM)

textarea.bind('<<Modified>>', statuesBarFunction)

# Add commands to edit menu
editmenu.add_command(label='Cut', accelerator='Ctrl+x', image=cutImage, compound=LEFT, command=lambda: textarea.event_generate('<Control x>'))
editmenu.add_command(label='Copy', accelerator='Ctrl+C', image=copyImage, compound=LEFT, command=lambda: textarea.event_generate('<Control c>'))
editmenu.add_command(label='Paste', accelerator='Ctrl+C', image=pasteImage, compound=LEFT, command=lambda: textarea.event_generate('<Control v>'))
editmenu.add_command(label='Clear', accelerator='Ctrl+Alt+x', image=clearImage, compound=LEFT, command=lambda: textarea.delete(0.0, END))
root.bind_all("<Control-Alt-x>", lambda event: clear_textarea())
editmenu.add_command(label='Find', accelerator='Ctrl+F', image=findImage, compound=LEFT, command=find)
editmenu.add_command(label='Header, Footer, Page Numbers', image=headearfooterImage, compound=LEFT, command=add_header_footer_page)

root.bind("<Control-o>", open_file)
root.bind("<Control-n>", new_file)
root.bind("<Control-s>", save_file)
root.bind("<Control-Alt-s>", saveas_file)
root.bind("<Control-p>", print_file)
root.bind("<Control-q>", iexit)
root.bind("<Control-Alt-x>", clear_textarea)
root.bind("<Control-f>", find)
# Start the main event loop
root.mainloop()

